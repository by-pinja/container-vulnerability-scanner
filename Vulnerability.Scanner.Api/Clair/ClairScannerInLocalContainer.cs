using System;
using System.Linq;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Options;
using Vulnerability.Scanner.Api.Shell;
using Vulnerability.Scanner.Clair;

namespace Vulnerability.Scanner.Api.Clair
{
    public class ClairScannerInLocalContainer : IClairScanner
    {
        private readonly ICommandLine shell;
        private readonly ScannerDataContext context;
        private readonly DockerHub dockerHubSettings;

        public ClairScannerInLocalContainer(IOptionsSnapshot<DockerHub> dockerHubSettings, ICommandLine shell, ScannerDataContext context)
        {
            this.dockerHubSettings = dockerHubSettings.Value;
            this.shell = shell;
            this.context = context;
        }

        public void CreateReport(Guid reportId)
        {
            var report = context.Reports.Single(x => x.Id == reportId);

            var bar = shell.Run($"cd");
            var result = shell.Run($"cd ../compose/ && docker-compose run klar {report.Image}");

            var asObject =  JObject.Parse(result);

            report.Processed = true;

            report.Vurnelabilities = asObject["Vulnerabilities"]
                .SelectMany(x => x.Children()) // High, low, unknown ...
                .SelectMany(x => x.Children())
                .Select(x => x.ToObject<VurnelabilityModel>())
                .ToList();

            context.SaveChanges();
        }
    }
}