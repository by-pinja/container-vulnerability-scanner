using System;
using System.Linq;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Vulnerability.Scanner.Api.Controllers.Domain;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Options;
using Vulnerability.Scanner.Api.Shell;
using Vulnerability.Scanner.Clair;

namespace Vulnerability.Scanner.Api.Clair
{
    public class ClairScanner : IClairScanner
    {
        private readonly ICommandLine shell;
        private readonly ScannerDataContext context;
        private readonly ILogger<ClairScanner> logger;
        private readonly CmdCommandResolver _commandLineResolver;

        public ClairScanner(ICommandLine shell, ScannerDataContext context, ILogger<ClairScanner> logger, CmdCommandResolver commandLineResolver)
        {
            this.shell = shell;
            this.context = context;
            this.logger = logger;
            _commandLineResolver = commandLineResolver;
        }

        public void CreateReport(Guid reportId)
        {
            var report = context.Reports.Single(x => x.Id == reportId);

            var result = shell.Run(_commandLineResolver.GetKlarCommand(imageName: report.Image));

            try
            {
                var asObject = JObject.Parse(result);

                report.Vurnelabilities = asObject["Vulnerabilities"]
                    .SelectMany(x => x.Children()) // High, low, unknown ...
                    .SelectMany(x => x.Children())
                    .Select(x => x.ToObject<VurnelabilityModel>())
                    .ToList();

                logger.LogInformation($"Processed {reportId}");

                report.Processed = true;

                context.SaveChanges();
            }
            catch (Exception ex)
            {
                logger.LogError($"{ex} occurred during parsing report '{reportId}', output of klar was {result}");
                throw;
            }
        }
    }
}