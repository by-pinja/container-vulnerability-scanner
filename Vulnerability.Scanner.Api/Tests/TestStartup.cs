using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Threading;
using Hangfire;
using Hangfire.MemoryStorage;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using NSubstitute;
using Protacon.NetCore.WebApi.ApiKeyAuth;
using Vulnerability.Scanner.Api.Clair;
using Vulnerability.Scanner.Api.Controllers.Domain;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Options;
using Vulnerability.Scanner.Api.Shell;
using Vulnerability.Scanner.Api.Tests.Mocks;
using Vulnerability.Scanner.Clair;

namespace Vulnerability.Scanner.Api.Tests
{
    public class TestStartup
    {
        public TestStartup()
        {
        }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc()
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

            services.AddAuthentication()
                .AddDisabledApiKeyAuth();

            services.AddHangfire(config => config.UseMemoryStorage());

            services.AddTransient<IClairScanner, ClairScanner>();
            services.AddTransient<Reports>();
            services.AddSingleton<ICommandLine>(_ => CommandLineMock.CreateDefault());
            services.AddTransient<CmdCommandResolver>();

            var googleCloudMock = Substitute.For<IGoogleCloud>();
            services.AddSingleton<IGoogleCloud>(_ => googleCloudMock);

            var dbId = Guid.NewGuid().ToString();

            services.AddDbContext<ScannerDataContext>(
                opt => opt.UseInMemoryDatabase(dbId));
        }

        public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole();
            var options = new BackgroundJobServerOptions
            {
                WorkerCount = 2,
                SchedulePollingInterval = TimeSpan.FromSeconds(1)
            };

            app.UseHangfireDashboard();
            app.UseHangfireServer(options);
            app.UseMvc();
        }
    }
}

