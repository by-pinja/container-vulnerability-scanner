using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using FluentAssertions;
using Microsoft.AspNetCore.TestHost;
using NUnit.Framework;
using Protacon.NetCore.WebApi.TestUtil;
using Protacon.NetCore.WebApi.TestUtil.Extensions;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Model;
using Vulnerability.Scanner.Api.Controllers.Models;

namespace Vulnerability.Scanner.Api.Tests
{
    [TestFixture]
    public class CVETests
    {
        private static GroupScanResponse PutGroup(TestServer host, Guid groupId, IEnumerable<VulnerabilityScanRequest> scanRequests)
        {
            return host
                .Put($"/v1/group/{groupId}", new GroupScanRequest
                {
                    ScanRequests = scanRequests
                })
                .ExpectStatusCode(HttpStatusCode.OK)
                .WithContentOf<GroupScanResponse>()
                .Select();
        }

        [Test]
        public void WhenInvalidCVEIdIsFetched_ThenReturnNotFound()
        {
            var host = SharedSetupFixture.Host;

            host.Get($"/v1/cve/{Guid.NewGuid()}/")
                .ExpectStatusCode(HttpStatusCode.NotFound);

            host.Get($"/v1/cve/{Guid.NewGuid()}/html")
                .ExpectStatusCode(HttpStatusCode.NotFound);
        }

        [Test]
        public void WhenGroupIsAdded_ThenCVESummaryShouldBeAvailable()
        {
            var host = SharedSetupFixture.Host;
            var groupId = Guid.NewGuid();

            var response = PutGroup(host, groupId, new [] { new VulnerabilityScanRequest("node:latest") });

            host.Get(response.ResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<GroupScanResponse>();

            host.Get($"/v1/cve/")
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<IEnumerable<CveSummaryModel>>()
                .Passing(x => x.Count().Should().BeGreaterThan(0));
        }

        [Test]
        public void WhenGroupIsCreated_ThenCheckCveCode()
        {
            var host = SharedSetupFixture.Host;

            var groupId = Guid.NewGuid();
            var result = PutGroup(host, groupId, new [] { new VulnerabilityScanRequest("node:latest") });

            host.Get(result.HtmlResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(15));

            host.Get($"/v1/cve/")
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<IEnumerable<CveSummaryModel>>()
                .Passing(x => x.Should().Contain(a => a.Name == "CVE-2017-16997"));
        }

        [Test]
        public void WhenSelectedSortedByName_ThenCVEShouldBeSortedRight()
        {
            var host = SharedSetupFixture.Host;
            var groupId = Guid.NewGuid();

            var response = PutGroup(host, groupId, new [] { new VulnerabilityScanRequest("node:latest") });

            host.Get(response.ResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<GroupScanResponse>();

            host.Get($"/v1/cve/?sortedBy=name")
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<IEnumerable<CveSummaryModel>>()
                .Passing(x => Assert.IsTrue(x.SequenceEqual(x.OrderByDescending(a => a.Name))));

            host.Get($"/v1/cve/?sortedBy=nameDesc")
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<IEnumerable<CveSummaryModel>>()
                .Passing(x => Assert.IsTrue(x.SequenceEqual(x.OrderBy(a => a.Name))));
        }

        [Test]
        public void WhenSelectedSortedByFrequency_ThenCVEShouldBeSortedRight()
        {
            var host = SharedSetupFixture.Host;
            var groupId = Guid.NewGuid();

            var response = PutGroup(host, groupId, new [] { new VulnerabilityScanRequest("node:latest") });

            host.Get(response.ResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<GroupScanResponse>();

            host.Get($"/v1/cve/?sortedBy=frequency")
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<IEnumerable<CveSummaryModel>>()
                .Passing(x => Assert.IsTrue(x.SequenceEqual(x.OrderByDescending(a => a.Frequency))));

            host.Get($"/v1/cve/?sortedBy=frequencyDesc")
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<IEnumerable<CveSummaryModel>>()
                .Passing(x => Assert.IsTrue(x.SequenceEqual(x.OrderBy(a => a.Frequency))));
        }

        [Test]
        public void WhenSortedByInvalidValue_ThenCVEShouldBeSortedByDefault()
        {
            var host = SharedSetupFixture.Host;
            var groupId = Guid.NewGuid();

            var response = PutGroup(host, groupId, new [] { new VulnerabilityScanRequest("node:latest") });

            host.Get(response.ResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<GroupScanResponse>();

            host.Get($"/v1/cve/?sortedBy=asdf")
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<IEnumerable<CveSummaryModel>>();
        }
    }
}