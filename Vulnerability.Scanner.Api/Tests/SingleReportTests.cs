using System;
using System.Linq;
using System.Net;
using System.Threading;
using FluentAssertions;
using Newtonsoft.Json.Linq;
using NUnit.Framework;
using Protacon.NetCore.WebApi.TestUtil;
using Protacon.NetCore.WebApi.TestUtil.Extensions;
using Vulnerability.Scanner.Api.Controllers.Models;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Tests;

namespace Vulnerability.Scanner.Tests
{
    [TestFixture]
    public class SingleReportTests
    {
        [Test]
        public void WhenImageIsSent_ThenResultsShouldBeSoonAvailable()
        {
            var host = SharedSetupFixture.Host;

            var result = host
                .Post("/v1/scan/", new VulnerabilityScanRequest
                {
                    Image = "node:latest"
                })
                .ExpectStatusCode(HttpStatusCode.OK)
                .WithContentOf<VulnerabilityScanResponse>()
                .Select();

            host.Get(result.ResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<VurnelabilityModel[]>()
                .Passing(x => x.Should().HaveCount(654));

            host.Get(result.HtmlResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<string>()
                .Passing(x => x.Should().Contain("High"));
        }

        [Test]
        public void WhenInvalidReportIdIsFetched_ThenReturnNotFound()
        {
            var host = SharedSetupFixture.Host;

            host.Get($"/v1/reports/{Guid.NewGuid()}")
                .ExpectStatusCode(HttpStatusCode.NotFound);

            host.Get($"/v1/reports/{Guid.NewGuid()}/html")
                .ExpectStatusCode(HttpStatusCode.NotFound);
        }
    }
}