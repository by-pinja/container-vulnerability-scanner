using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using FluentAssertions;
using Microsoft.AspNetCore.TestHost;
using NUnit.Framework;
using Protacon.NetCore.WebApi.TestUtil;
using Protacon.NetCore.WebApi.TestUtil.Extensions;
using Vulnerability.Scanner.Api.Controllers.Models;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Model;

namespace Vulnerability.Scanner.Api.Tests
{
    [TestFixture]
    public class GroupTests
    {
        [Test]
        public void WhenGroupIsCreated_ThenReportsWillBeAvailable()
        {
            var host = SharedSetupFixture.Host;

            var groupId = Guid.NewGuid();
            var result = PutGroup(host, groupId, new [] { new VulnerabilityScanRequest("node:latest") });

            host.Get(result.ScanReponses.Single().ResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(15))
                .WithContentOf<VulnerabilityModel[]>()
                .Passing(x => x.Should().HaveCount(654));

            host.Get(result.ScanReponses.Single().HtmlResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(15))
                .WithContentOf<string>()
                .Passing(x => x.Should().Contain("High"));
        }

        private static GroupScanResponse PutGroup(TestServer host, Guid groupId, IEnumerable<VulnerabilityScanRequest> scanRequests)
        {
            return host
                .Put($"/v1/group/{groupId}", new GroupScanRequest
                {
                    ScanRequests = scanRequests
                })
                .ExpectStatusCode(HttpStatusCode.OK)
                .WithContentOf<GroupScanResponse>()
                .Select();
        }

        [Test]
        public void WhenGroupIsUpdated_ThenPreviousResultsAreReplaced()
        {
            var host = SharedSetupFixture.Host;
            var groupId = Guid.NewGuid();

            PutGroup(host, groupId, new [] { new VulnerabilityScanRequest("node:latest") });
            var result = PutGroup(host, groupId, new VulnerabilityScanRequest[] {});

            host.Get(result.ResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<GroupScanResponse>()
                .Passing(x => x.ScanReponses.Should().HaveCount(0));

            result.ScanReponses.Should().HaveCount(0);
        }

        [Test]
        public void WhenGroupsAreAdded_ThenTheyCanBeGet()
        {
            var host = SharedSetupFixture.Host;
            var groupId = Guid.NewGuid();

            var response = PutGroup(host, groupId, new [] { new VulnerabilityScanRequest("node:latest") });

            host.Get(response.ResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<GroupScanResponse>();

            host.Get($"/v1/group/")
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10))
                .WithContentOf<IEnumerable<GroupSummaryModel>>()
                .Passing(x => x.Should().Contain(a => a.GroupId == groupId.ToString()));
        }

        [Test]
        public void WhenGroupIsAdded_ThenHtmlPageShouldBeAvailable()
        {
            var host = SharedSetupFixture.Host;
            var groupId = Guid.NewGuid();

            var response = PutGroup(host, groupId, new [] { new VulnerabilityScanRequest("node:latest") });

            host.Get(response.HtmlResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10));

            host.Get($"/v1/group/html")
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10));
        }

         [Test]
        public void WhenGroupIsRemoved_ThenRedirect()
        {
            var host = SharedSetupFixture.Host;
            var groupId = Guid.NewGuid();

            var response = PutGroup(host, groupId, new [] { new VulnerabilityScanRequest("node:latest") });

            host.Get(response.HtmlResultsUri)
                .WaitForStatusCode(HttpStatusCode.OK, timeout: TimeSpan.FromSeconds(10));

            host.Get($"v1/group/remove/{groupId}")
                .WaitForStatusCode(HttpStatusCode.Redirect, timeout: TimeSpan.FromSeconds(10));
        }
    }
}