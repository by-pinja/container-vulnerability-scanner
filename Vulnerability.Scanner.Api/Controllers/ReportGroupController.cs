using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Vulnerability.Scanner.Api.Controllers.Domain;
using Vulnerability.Scanner.Api.Controllers.Models;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Model;

namespace Vulnerability.Scanner.Api.Controllers
{
    public class ReportGroupController : Controller
    {
        private readonly Reports reports;
        private readonly IOptionsSnapshot<GeneralOptions> config;
        public static string tempSortedBy;
        public ReportGroupController(Reports reports,
            ScannerDataContext context,
            IOptionsSnapshot<GeneralOptions> config)
        {
            this.reports = reports;
            this.config = config;
        }

        [HttpPut("v1/group/{groupId}")]
        public ActionResult<GroupScanResponse> Put(string groupId, [FromBody] GroupScanRequest value)
        {
            if (string.IsNullOrEmpty(groupId))
                return BadRequest();

            var group = this.reports.PutGroup(groupId, value);
            return new GroupScanResponse(group, this.config);
        }

        [HttpGet("v1/group/{groupId}")]
        public ActionResult<GroupScanResponse> GetGroupReport(string groupId)
        {
            var group = this.reports.GetGroupOrDefault(groupId);

            if(group == null)
                return NotFound();

            return new GroupScanResponse(group, this.config);
        }

        [HttpGet("v1/group/{groupId}/html")]
        public IActionResult GetGroupReportHtml(string groupId)
        {
            var group = this.reports.GetGroupOrDefault(groupId);

            if(group == null)
                return NotFound();

            return View("~/Controllers/Pages/GroupReport.cshtml", group);
        }

        [HttpGet("v1/group")]
        public ActionResult<GroupSummaryModel> GetAll()
        {
            return Ok(this.reports.GetGroupSummary());
        }

        [HttpGet("v1/group/html")]
        public IActionResult GetAllHtml()
        {
            return View("~/Controllers/Pages/GroupSummary.cshtml", this.reports.GetGroupSummary());
        }

        [HttpGet("v1/cve-group/")]
        public ActionResult<CveGroupSummaryModel> GetAllCve(string sortOrder)
        {
            return Ok(this.reports.GetCveGroupSummary());
        }

        [HttpGet("v1/cve-group/html")]
        public IActionResult GetAllCveHtml(string sortedBy)
        {
            var cves = ReportUtils.GetCveSeverityGroup(this.reports.GetCveGroupSummary());

            if (sortedBy != null) {
                if (sortedBy == "severity") {
                    Console.WriteLine(ReportGroupController.tempSortedBy + " == " + sortedBy);
                    if (ReportGroupController.tempSortedBy == sortedBy) {
                        cves = ReportUtils.GetCveSeverityGroup(cves);
                        ReportGroupController.tempSortedBy = "severityDesc";
                    } else {

                        cves = ReportUtils.GetCveSeverityGroup(cves).Reverse();
                        ReportGroupController.tempSortedBy = "severity";
                    }
                } else if (sortedBy == "name") {
                    if (ReportGroupController.tempSortedBy == "name") {
                        cves = cves.OrderByDescending(x => x.Name);
                        ReportGroupController.tempSortedBy = "nameDesc";
                    } else {
                        cves = cves.OrderBy(x => x.Name);
                        ReportGroupController.tempSortedBy = "name";
                    }
                } else if (sortedBy == "frequency") {
                    if (ReportGroupController.tempSortedBy == "frequency") {
                        cves = cves.OrderByDescending(x => x.Frequency);
                        ReportGroupController.tempSortedBy = "frequencyDesc";
                    } else {
                        cves = cves.OrderBy(x => x.Frequency);
                        ReportGroupController.tempSortedBy = "frequency";
                    }
                }
            }

            return View("~/Controllers/Pages/CVEGroupSummary.cshtml", cves);
        }


        [HttpGet("v1/cve-group/{cve}")]
        public ActionResult<CvelistModel> GetCveSummary(string cve)
        {
            return Ok(this.reports.GetContainersByCve(cve));
        }

        [HttpGet("v1/cve-group/{cve}/html")]
        public IActionResult GetCveSummaryHtml(string cve)
        {
            VulnerabilityModel vulnerability = this.reports.GetCveByName(cve);
            List<ReportModel> reportList = new List<ReportModel>(this.reports.GetContainersByCve(cve).ToList());
            return View("~/Controllers/Pages/CVESummary.cshtml", new CvelistModel(vulnerability, reportList));
        }
    }
}