using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Vulnerability.Scanner.Api.Controllers.Domain;
using Vulnerability.Scanner.Api.Controllers.Models;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Model;

namespace Vulnerability.Scanner.Api.Controllers
{
    public class ReportGroupController : Controller
    {
        private readonly Reports reports;
        private readonly IOptionsSnapshot<GeneralOptions> config;

        public ReportGroupController(Reports reports,
            IOptionsSnapshot<GeneralOptions> config)
        {
            this.reports = reports;
            this.config = config;
        }

        [HttpPut("v1/group/{groupId}")]
        public ActionResult<GroupScanResponse> Put(string groupId, [FromBody] GroupScanRequest value)
        {
            if (string.IsNullOrEmpty(groupId))
                return BadRequest();

            var group = this.reports.PutGroup(groupId, value);
            return new GroupScanResponse(group, this.config);
        }

        [HttpGet("v1/group/{groupId}")]
        public ActionResult<GroupScanResponse> GetGroupReport(string groupId)
        {
            var group = this.reports.GetGroupOrDefault(groupId);

            if (group == null)
                return NotFound();

            return new GroupScanResponse(group, this.config);
        }

        [HttpGet("v1/group/{groupId}/html")]
        public IActionResult GetGroupReportHtml(string groupId)
        {
            var group = this.reports.GetGroupOrDefault(groupId);

            if (group == null)
                return NotFound();

            return View("~/Controllers/Pages/GroupReport.cshtml", group);
        }


        [HttpDelete("v1/group/{groupId}")]
        public ActionResult Remove(string groupId)
        {
            this.reports.RemoveGroup(groupId);
            return Ok();
        }

        [HttpGet("v1/group")]
        public ActionResult<GroupSummaryModel> GetAll()
        {
            return Ok(this.reports.GetGroupSummary());
        }

        [HttpGet("v1/group/html")]
        public IActionResult GetAllHtml()
        {
            return View("~/Controllers/Pages/GroupSummary.cshtml", this.reports.GetGroupSummary());
        }

        [HttpGet("v1/cve/")]
        public ActionResult<CveSummaryModel> GetAllCve(string sortedBy)
        {
            var cves = ReportUtils.GetSortedCvesBySeverity(this.reports.GetCveSummary());

            if (sortedBy != null)
            {
                switch (sortedBy)
                {
                    case "severity":
                        cves = ReportUtils.GetSortedCvesBySeverity(cves);
                        break;
                    case "severityDesc":
                        cves = ReportUtils.GetSortedCvesBySeverity(cves).Reverse();
                        break;
                    case "name":
                        cves = cves.OrderByDescending(x => x.Name);
                        break;
                    case "nameDesc":
                        cves = cves.OrderBy(x => x.Name);
                        break;
                    case "frequency":
                        cves = cves.OrderByDescending(x => x.Frequency);
                        break;
                    case "frequencyDesc":
                        cves = cves.OrderBy(x => x.Frequency);
                        break;
                    default:
                        cves = ReportUtils.GetSortedCvesBySeverity(cves);
                        break;
                }
            }

            return Ok(cves);
        }

        [HttpGet("v1/cve/html")]
        public IActionResult GetAllCveHtml(string sortedBy)
        {
            var cves = ReportUtils.GetSortedCvesBySeverity(this.reports.GetCveSummary());

            if (sortedBy != null)
            {
                switch (sortedBy)
                {
                    case "severity":
                        {
                            cves = ReportUtils.GetSortedCvesBySeverity(cves);
                        }
                        break;
                    case "severityDesc":
                        {
                            cves = ReportUtils.GetSortedCvesBySeverity(cves).Reverse();
                        }
                        break;
                    case "name":
                        {
                            cves = cves.OrderByDescending(x => x.Name);
                        }
                        break;
                    case "nameDesc":
                        {
                            cves = cves.OrderBy(x => x.Name);
                        }
                        break;
                    case "frequency":
                        {
                            cves = cves.OrderByDescending(x => x.Frequency);
                        }
                        break;
                    case "frequencyDesc":
                        {
                            cves = cves.OrderBy(x => x.Frequency);
                        }
                        break;
                    default:
                        {
                            cves = ReportUtils.GetSortedCvesBySeverity(cves);
                            sortedBy = "severity";
                        }
                        break;
                }

                ViewBag.SortedBy = sortedBy;
            }
            else
            {
                ViewBag.SortedBy = "severity";
            }

            return View("~/Controllers/Pages/CVEGroupSummary.cshtml", cves);
        }


        [HttpGet("v1/cve/{cve}")]
        public ActionResult<CveListModel> GetCveSummary(string cve)
        {
            VulnerabilityModel vulnerability = this.reports.GetCveByNameOrDefault(cve);

            if (vulnerability == null)
                return NotFound();

            IEnumerable<ReportModel> reportList = this.reports.GetContainersByCve(cve);
            return Ok(new CveListModel(vulnerability, reportList));
        }

        [HttpGet("v1/cve/{cve}/html")]
        public IActionResult GetCveSummaryHtml(string cve)
        {
            VulnerabilityModel vulnerability = this.reports.GetCveByNameOrDefault(cve);

            if (vulnerability == null)
                return NotFound();

            IEnumerable<ReportModel> reportList = this.reports.GetContainersByCve(cve);
            return View("~/Controllers/Pages/CVESummary.cshtml", new CveListModel(vulnerability, reportList));
        }
    }
}