using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Vulnerability.Scanner.Api.Controllers.Domain;
using Vulnerability.Scanner.Api.Controllers.Models;
using Vulnerability.Scanner.Api.Data;

namespace Vulnerability.Scanner.Api.Controllers
{
    public class ReportGroupController : Controller
    {
        private readonly Reports reports;
        private readonly ScannerDataContext context;
        private readonly IOptionsSnapshot<GeneralOptions> config;

        public ReportGroupController(Reports reports, ScannerDataContext context, IOptionsSnapshot<GeneralOptions> config)
        {
            this.reports = reports;
            this.context = context;
            this.config = config;
        }

        [HttpPut("v1/group/{groupId}")]
        public ActionResult<GroupScanResponse> Put(Guid groupId, [FromBody] GroupScanRequest value)
        {
            if (groupId == default(Guid))
                return BadRequest();

            var group = this.context.Groups.Add(new GroupModel(groupId)).Entity;

            var scans = value.ScanRequests.Select(x => this.reports.CreateReport(x));

            return Ok(new GroupScanResponse
            {
                Id = groupId,
                GroupMeta = value.GroupMeta,
                ScanReponses = scans
            });
        }

        [HttpGet("v1/group/{groupId}")]
        public ActionResult<GroupScanResponse> GetOne(Guid groupId)
        {
            var group = this.context.Groups.SingleOrDefault(x => x.Id == groupId);

            if(group == null)
                return NotFound();

            return new GroupScanResponse(group, this.config.Value);
        }

        [HttpGet("v1/group/")]
        public ActionResult<IEnumerable<GroupScanResponse>> GetAll()
        {
            return Ok(this.context.Groups.Select(x => new GroupScanResponse(x, this.config.Value)));
        }
    }
}