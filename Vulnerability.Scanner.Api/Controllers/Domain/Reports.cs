using System;
using System.Collections.Generic;
using System.Linq;
using Hangfire;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Vulnerability.Scanner.Api.Controllers.Models;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Model;
using Vulnerability.Scanner.Clair;

namespace Vulnerability.Scanner.Api.Controllers.Domain
{
    public class Reports
    {
        private readonly IBackgroundJobClient _jobClient;
        private readonly ScannerDataContext _dataContext;

        public Reports(
            IBackgroundJobClient jobClient,
            ScannerDataContext dataContext)
        {
            _jobClient = jobClient;
            _dataContext = dataContext;
        }

        public ReportModel CreateReport(VulnerabilityScanRequest scanRequest)
        {
            var entity = _dataContext.Reports.Add(new ReportModel(scanRequest.Image)).Entity;

            _dataContext.SaveChanges();

            _jobClient
                .Enqueue<IClairScanner>(c => c.CreateReport(entity.Id));

            return entity;
        }

        public ReportModel GetReportOrDefault(Guid id)
        {
            return _dataContext.Reports.Include(x => x.Vurnelabilities).SingleOrDefault(x => x.Id == id);
        }

        public GroupModel PutGroup(string groupId, GroupScanRequest request)
        {
            var reports = request.ScanRequests
                .Select(x => CreateReport(x))
                .ToList();

            var existing = GetGroupOrDefault(groupId);

            if(existing == null)
            {
                var group = _dataContext.Groups.Add(new GroupModel(groupId, reports)).Entity;
                _dataContext.SaveChanges();
                return group;
            }
            else
            {
                existing.GroupMeta = request.GroupMeta;
                existing.Reports = reports;
                _dataContext.SaveChanges();
                return existing;
            }
        }

        public GroupModel GetGroupOrDefault(string groupId)
        {
            return _dataContext
                .Groups
                .Include(x => x.Reports)
                .ThenInclude(x => x.Vurnelabilities)
                .SingleOrDefault(x => x.GroupId == groupId);
        }

        public IEnumerable<GroupSummaryModel> GetGroupSummary()
        {
            return _dataContext
                .Groups
                .Include(x => x.Reports)
                .ThenInclude(x => x.Vurnelabilities)
                .Select(x => new GroupSummaryModel()
                {
                    GroupId = x.GroupId,
                    Defcon = x.Reports.SelectMany(r => r.Vurnelabilities).Count(v => v.Severity == "Defcon"),
                    Critical = x.Reports.SelectMany(r => r.Vurnelabilities).Count(v => v.Severity == "Critical"),
                    High = x.Reports.SelectMany(r => r.Vurnelabilities).Count(v => v.Severity == "High")
                })
                .ToList();
        }

        public IEnumerable<CveSummaryModel> GetCveSummary()
        {
            return _dataContext
                .Groups
                .Include(x => x.Reports)
                .ThenInclude(x => x.Vurnelabilities)
                .Select(x => new CveSummaryModel()
                {
                    Severity = x.GroupId
                })
                .ToList();
        }
    }
}