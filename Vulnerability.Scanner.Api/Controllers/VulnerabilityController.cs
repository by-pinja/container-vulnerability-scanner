using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Hangfire;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Vulnerability.Scanner.Api.Controllers.Models;
using Vulnerability.Scanner.Api.Options;
using Vulnerability.Scanner.Api.Shell;

namespace Vulnerability.Scanner.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class VulnerabilityController : ControllerBase
    {
        private readonly DockerHub _config;
        private readonly IBackgroundJobClient _jobClient;

        public VulnerabilityController(IBackgroundJobClient jobClient, IOptionsSnapshot<DockerHub> config)
        {
            _config = config.Value;
            _jobClient = jobClient;
        }

        [HttpPost("v1/scan/")]
        public ActionResult<VulnerabilityScanResponse> Post([FromBody] VulnerabilityScanRequest value)
        {
            _jobClient
                .Enqueue<ICommandLine>(c => c.Run($"/etc/analyze-image.sh {_config.Username} {_config.Password} {value.Image}"));

            return Ok(new VulnerabilityScanResponse());
        }

        [HttpGet("/v1/reports/{id}")]
        public void GetReport(Guid id)
        {
        }

        [HttpGet("/v1/reports/{id}/html")]
        public IActionResult GetReportAsHtml(Guid id)
        {
            return Ok();
        }
    }
}
