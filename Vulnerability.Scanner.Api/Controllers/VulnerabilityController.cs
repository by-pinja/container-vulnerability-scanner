using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Hangfire;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Newtonsoft.Json.Linq;
using Vulnerability.Scanner.Api.Controllers.Models;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Options;
using Vulnerability.Scanner.Api.Shell;
using Vulnerability.Scanner.Api.Util;
using Vulnerability.Scanner.Clair;

namespace Vulnerability.Scanner.Api.Controllers
{
    [ApiController]
    public class VulnerabilityController : ControllerBase
    {
        private readonly IBackgroundJobClient _jobClient;
        private readonly IOptionsSnapshot<General> _generalConfig;
        private readonly ScannerDataContext _dataContext;

        public VulnerabilityController(
            IBackgroundJobClient jobClient,
            IOptionsSnapshot<General> generalConfig,
            ScannerDataContext dataContext)
        {
            _jobClient = jobClient;
            _generalConfig = generalConfig;
            _dataContext = dataContext;
        }

        [HttpPost("v1/scan/")]
        public ActionResult<VulnerabilityScanResponse> Post([FromBody] VulnerabilityScanRequest value)
        {
            var parsedImageName = ImageUriParser.ParseUri(value.Image);
            var entity = _dataContext.Reports.Add(new Report(parsedImageName.uri, parsedImageName.tag)).Entity;

            _dataContext.SaveChanges();

            _jobClient
                .Enqueue<IClairScanner>(c => c.CreateReport(entity.Id));

            return Ok(new VulnerabilityScanResponse
            {
                ScanId = entity.Id,
                HtmlResultsUri = $"{_generalConfig.Value.AppRootUri}/v1/reports/{entity.Id}/html",
                ResultsUri = $"{_generalConfig.Value.AppRootUri}/v1/reports/{entity.Id}",
                Meta = value.Meta,
                Image = value.Image
            });
        }

        [HttpGet("/v1/reports/{id}")]
        public ActionResult<object> GetReport(Guid id)
        {
            var report = _dataContext.Reports.SingleOrDefault(x => x.Id == id);

            if (report == null)
                return NotFound();

            if (!report.Processed)
                return NotFound(new { Status = "Processing" });

            return Ok(JObject.Parse(report.ReportJson));
        }

        [HttpGet("/v1/reports/{id}/html")]
        public IActionResult GetReportAsHtml(Guid id)
        {
            var report = _dataContext.Reports.SingleOrDefault(x => x.Id == id);

            if (report == null)
                return NotFound();

            return new ContentResult()
            {
                Content = report.ReportHtml,
                ContentType = "text/html"
            };
        }
    }
}
