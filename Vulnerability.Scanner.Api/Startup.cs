using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Hangfire;
using Hangfire.MemoryStorage;
using Hangfire.PostgreSql;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Swashbuckle.AspNetCore.Swagger;
using Vulnerability.Scanner.Api.Clair;
using Vulnerability.Scanner.Api.Controllers.Domain;
using Vulnerability.Scanner.Api.Data;
using Vulnerability.Scanner.Api.Options;
using Vulnerability.Scanner.Api.Shell;
using Vulnerability.Scanner.Clair;

namespace Vulnerability.Scanner.Api
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc()
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);

            services.AddSwaggerGen(c =>
            {
                var basePath = System.AppContext.BaseDirectory;

                c.SwaggerDoc("v1",
                    new Info
                    {
                        Title = Assembly.GetEntryAssembly().GetName().Name,
                        Version = "v1",
                        Description = File.ReadAllText(Path.Combine(basePath, "README.md"))
                    });
            });

            services.AddTransient<IClairScanner, ClairScanner>();
            services.AddTransient<Reports>();
            services.AddTransient<CmdCommandResolver>();
            services.AddTransient<IGoogleCloud, GoogleCloud>();

            services.Configure<DockerHubOptions>(Configuration.GetSection("DockerHub"));
            services.Configure<GeneralOptions>(Configuration.GetSection("General"));
            services.Configure<GcrOptions>(Configuration.GetSection("Google"));

            var connectionStringIfAny = Configuration["General:ConnectionString"];

            if(string.IsNullOrEmpty(connectionStringIfAny))
            {
                var dbId = Guid.NewGuid().ToString();

                services.AddDbContext<ScannerDataContext>(
                    opt => opt.UseInMemoryDatabase(dbId));

                services.AddHangfire(config => config.UseMemoryStorage());
            }
            else
            {
               services.AddHangfire(config =>
                    config.UsePostgreSqlStorage(connectionStringIfAny ?? throw new InvalidOperationException("Missing: ConnectionString")));
                services.AddDbContext<ScannerDataContext>(opt => opt.UseNpgsql(connectionStringIfAny));
            }

            bool isWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);

            if (isWindows)
            {
                services.AddTransient<ICommandLine, CommandLineWindows>();
            }
            else
            {
                services.AddTransient<ICommandLine, CommandShLinux>();
            }
        }

        public void Configure(IApplicationBuilder app)
        {
            app.UseSwagger();

            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "Vulnerability.Scanner.Api");
                c.RoutePrefix = "doc";
            });

           var options = new BackgroundJobServerOptions
            {
                WorkerCount = 2
            };

            app.UseHangfireServer(options);
            app.UseHangfireDashboard();

            app.UseMvc();
        }
    }
}
